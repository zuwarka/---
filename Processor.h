#pragma once 

class Processor 
{
private:

	int** data; //матрица команд, где столбцы - программа, строки - команды
	int* lead_time; //время доступа - здесь будем считать время доступа к каналу связи и вычислять полное время обращения
	int* memory_access; //массив имен доступа к памяти - здесь будем хранить переменные, по которым определяется доступ к каналу связи
	int Pn; //процент данных, расположенных в одном конкретном блоке памяти
	int Kr; //процент команд, не требующих обращений к памяти. Выполняются за 1 единицу времени
	int M; //кол-во единиц времени, которое требуется для обращения к памяти
	int K; //кол-во команд, составляющих программу
	int N; //кол-во блоков процессоров-памяти

public:

	Processor();
	Processor(int Pn, int Kr, int M, int K, int N);
	~Processor();

	void set_pn(int Pn);
	void set_kr(int Kr);
	void set_m(int M);
	void set_k(int K);
	void set_n(int N);

	void set_data_to_memory(); //метод распределения данных по блокам памятей

	void commutator(int flag); //метод работы процессоров с коммутационной связью
	void bus(int flag); //метод работы процессоров с шинной связью

	int memory(int req, int num); //метод, дающий или разрешающий доступ к памяти (коммутатор)
	int memory(int req); //метод, дающий или разрешающий доступ к памяти (шина)
	int worktime(); //метод вычисления времени работы программ на процессорах
};
